import base64
from io import BytesIO
from fontTools.ttLib import TTFont
import requests
import re

# 正则获取字体文件内容
url = 'https://sz.58.com/searchjob/pve_5569_1_pve_5568_1/?key=%E7%BE%8E%E5%AE%B9&cmcskey=%E7%BE%8E%E5%AE%B9&final=1&jump=2&specialtype=gls&jlabtest=&-3=J&param8616=0&param8516=1'
res = requests.get(url)
text = res.text
font_str = re.findall(r"base64,(.*?)\)", text)[0]
# 直接从网页源代码拷贝字体文件内容
# base64Str = ''
# base64解码  base64.decodebytes()可处理str类型
binData = base64.decodebytes(font_str.encode())
# 写入otf字体文件
filePath01 = r'jianli3.woff'
# filePath02 = r'text_20190402_03.xml'
with open(filePath01, 'wb') as f:
    f.write(binData)
    f.close()
# 解析字体库
# font01 = TTFont(filePath01)
# # BytesIO() 把二进制数据bin_data当作文件来操作,TTFont接收一个文件类型
font01 = TTFont(BytesIO(binData))
font01.saveXML('jianli3.xml')

# cmap = font01['cmap']
# tab = cmap.tables[0]
# gly = tab.ttFont.getGlyphOrder()
# uniList = font01['cmap'].tables[0].ttFont.getGlyphOrder()
# utfList = font01['cmap'].tables[0].ttFont.tables['cmap'].tables[0].cmap  # c = font.getBestCmap()
# retList = []
# getText = '麣龒鸺驋龒鑶鑶麣龥龤龤'
# for i in getText:
#     # ord()以字符作为参数，返回对应的Unicode数值
#     c = ord(i)
#     if c in utfList:
#         utcl = utfList[c][-2:]
#         text = int(utcl) - 1
#     else:
#         text = i
#     retList.append(text)
# crackText = ''.join([str(i) for i in retList])
# print(crackText)
